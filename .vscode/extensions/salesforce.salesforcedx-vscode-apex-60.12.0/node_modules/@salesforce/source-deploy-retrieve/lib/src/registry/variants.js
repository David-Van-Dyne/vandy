"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.firstLevelMerge = exports.getEffectiveRegistry = void 0;
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const core_1 = require("@salesforce/core");
const collections_1 = require("../utils/collections");
const registryData = __importStar(require("./metadataRegistry.json"));
/** combine the standard registration with any overrides specific in the sfdx-project.json */
const getEffectiveRegistry = (input) => (0, collections_1.deepFreeze)((0, exports.firstLevelMerge)(registryData, loadVariants(input)));
exports.getEffectiveRegistry = getEffectiveRegistry;
/** read the project to get additional registry customizations and presets */
const loadVariants = ({ projectDir } = {}) => {
    const logger = core_1.Logger.childFromRoot('variants');
    const projJson = maybeGetProject(projectDir);
    if (!projJson) {
        logger.debug('no project found, using standard registry');
        // there might not be a project at all and that's ok
        return emptyRegistry;
    }
    // there might not be any customizations in a project, so we default to the emptyRegistry
    const customizations = projJson.get('registryCustomizations') ?? emptyRegistry;
    const presets = projJson.get('registryPresets') ?? [];
    if (Object.keys(customizations.types).length > 0) {
        logger.debug(`found registryCustomizations for types [${Object.keys(customizations.types).join(',')}] in ${projJson.getPath()}`);
    }
    if (presets.length > 0) {
        logger.debug(`using registryPresets [${presets.join(',')}] in ${projJson.getPath()}`);
    }
    const registryFromPresets = presets.reduce((prev, curr) => (0, exports.firstLevelMerge)(prev, loadPreset(curr)), emptyRegistry);
    if (presets.length > 0 || Object.keys(customizations.types).length > 0) {
        void core_1.Lifecycle.getInstance().emitTelemetry({
            library: 'SDR',
            eventName: 'RegistryVariants',
            presetCount: presets.length,
            presets: presets.join(','),
            customizationsCount: Object.keys(customizations.types).length,
            customizationsTypes: Object.keys(customizations.types).join(','),
        });
    }
    return (0, exports.firstLevelMerge)(registryFromPresets, customizations);
};
const maybeGetProject = (projectDir) => {
    try {
        return core_1.SfProject.getInstance(projectDir ?? process.cwd()).getSfProjectJson();
    }
    catch (e) {
        return undefined;
    }
};
const loadPreset = (preset) => {
    const pathToCheck = path.join(__dirname, 'presets', `${preset}.json`);
    try {
        const rawPreset = fs.readFileSync(pathToCheck, 'utf-8');
        return JSON.parse(rawPreset);
    }
    catch (e) {
        throw new Error(`Failed to load preset ${preset} in ${pathToCheck}`);
    }
};
const emptyRegistry = {
    types: {},
    childTypes: {},
    suffixes: {},
    strictDirectoryNames: {},
};
/** merge the children of the top-level properties (ex: types, suffixes, etc) on 2 registries */
const firstLevelMerge = (original, overrides) => ({
    types: { ...original.types, ...(overrides.types ?? {}) },
    childTypes: { ...original.childTypes, ...(overrides.childTypes ?? {}) },
    suffixes: { ...original.suffixes, ...(overrides.suffixes ?? {}) },
    strictDirectoryNames: { ...original.strictDirectoryNames, ...(overrides.strictDirectoryNames ?? {}) },
});
exports.firstLevelMerge = firstLevelMerge;
//# sourceMappingURL=variants.js.map